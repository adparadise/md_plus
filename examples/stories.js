/**
 * Consumes HTML generated by MarkDown like this:
 *   
 *   ## Instructor Interface
 *   * As an instructor I can log in
 *   * As an instructor I can log out
 */
window.StoriesGenerator = function () {
    var MDPlus = require('md-plus');

    // Initialize this generator.
    this.initialize = function () {
        this._buildDefinitions();
    };
    
    // Consume the contents of container, building the stories
    this.consume = function (container) {
        var parser = new MDPlus.Parser(container, this._definitions);
        this._stories = [];
        parser.parse();
    }    

    // Creates the parser definition object for use by the parser.
    this._buildDefinitions = function () {
        var builder = new MDPlus.Definition.Builder();
        this._definitions = builder.build([{
            tag: /^h[2-9]$/i, ref: 'header',
            children: [{ 
                tag: 'li', ref: 'story',
                handler: this._addStory, context: this 
            }]
        }]);

        this._stack = new MDPlus.StackBuilder();
        this._stack.setSequence(["H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9"]);
        this._stack.handle(this._definitions, 'header');
    };

    // Handler for the parser to call when it encounters a story.
    this._addStory = function (span, definition) {
        var storyName = span.getMatchingElement().textContent;
        var tag = this._stack.getStack().join("_");
        var data = span.dataWithin();
        this._stories.push(new Story(storyName, tag, data));
    };

    // Class definition of a story for holding the data found on the page.
    var Story = function (name, tag, data) {
        this._name = name;
        this._tag = tag;
        console.log(tag);
        this._data = data;
    };

    this.initialize.apply(this, arguments);
};